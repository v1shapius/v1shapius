import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button
from typing import Optional
from database.database import DatabaseManager
from locales import LocaleManager
from models.match import Match, MatchFormat
from models.player import Player
from models.penalty_settings import PenaltySettings

class MatchCreationModal(Modal, title="–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–∞"):
    """Modal for creating a new match"""
    
    def __init__(self, opponent: discord.Member):
        super().__init__()
        self.opponent = opponent
        
        self.format_input = TextInput(
            label="–§–æ—Ä–º–∞—Ç –º–∞—Ç—á–∞",
            placeholder="bo1, bo2, –∏–ª–∏ bo3",
            default="bo1",
            required=True,
            min_length=3,
            max_length=3
        )
        
        self.add_item(self.format_input)

class MatchJoinView(View):
    """View for players to accept or decline match challenges"""
    
    def __init__(self, challenger: discord.Member, opponent: discord.Member, match_format: str):
        super().__init__(timeout=300)
        self.challenger = challenger
        self.opponent = opponent
        self.match_format = match_format
        self.challenger_accepted = False
        self.opponent_accepted = False
        
        # Add accept/decline buttons
        self.add_item(Button(
            label="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤",
            custom_id="accept_challenge",
            style=discord.ButtonStyle.success
        ))
        self.add_item(Button(
            label="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            custom_id="decline_challenge",
            style=discord.ButtonStyle.danger
        ))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        """Check if user can interact with this view"""
        if interaction.user.id not in [self.challenger.id, self.opponent.id]:
            await interaction.response.send_message(
                "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —ç—Ç–∏–º –≤—ã–∑–æ–≤–æ–º.",
                ephemeral=True
            )
            return False
            
        custom_id = interaction.data.get("custom_id", "")
        
        if custom_id == "accept_challenge":
            if interaction.user.id == self.challenger.id:
                self.challenger_accepted = True
                await interaction.response.send_message(
                    "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∞—Ç—á—É!",
                    ephemeral=True
                )
            elif interaction.user.id == self.opponent.id:
                self.opponent_accepted = True
                await interaction.response.send_message(
                    "–í—ã –ø—Ä–∏–Ω—è–ª–∏ –≤—ã–∑–æ–≤!",
                    ephemeral=True
                )
                
            # Check if both players accepted
            if self.challenger_accepted and self.opponent_accepted:
                await self.proceed_to_match(interaction)
                
        elif custom_id == "decline_challenge":
            if interaction.user.id == self.opponent.id:
                await interaction.response.send_message(
                    "–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤—ã–∑–æ–≤.",
                    ephemeral=True
                )
                await interaction.message.edit(
                    content=f"‚ùå {self.opponent.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–∑–æ–≤ –æ—Ç {self.challenger.mention}",
                    view=None
                )
            else:
                await interaction.response.send_message(
                    "–¢–æ–ª—å–∫–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤.",
                    ephemeral=True
                )
                
        return True
        
    async def proceed_to_match(self, interaction: discord.Interaction):
        """Proceed to match creation after both players accept"""
        try:
            # Create match in database
            db_manager = DatabaseManager()
            session = await db_manager.get_session()
            async with session:
                # Get or create players
                player1 = await self.get_or_create_player(session, self.challenger.id, self.challenger.display_name)
                player2 = await self.get_or_create_player(session, self.opponent.id, self.opponent.display_name)
                
                # Create match
                match = Match(
                    player1_id=player1.id,
                    player2_id=player2.id,
                    format=MatchFormat(self.match_format.lower()),
                    guild_id=interaction.guild_id
                )
                
                session.add(match)
                await session.commit()
                
                # Create match thread
                thread = await interaction.channel.create_thread(
                    name=f"–ú–∞—Ç—á {self.challenger.display_name} vs {self.opponent.display_name}",
                    type=discord.ChannelType.public_thread
                )
                
                # Update match with thread ID
                match.thread_id = thread.id
                await session.commit()
                
                # Send match confirmation
                embed = discord.Embed(
                    title="üéÆ –ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω!",
                    description=f"**{self.challenger.mention}** vs **{self.opponent.mention}**",
                    color=discord.Color.green()
                )
                
                embed.add_field(
                    name="–§–æ—Ä–º–∞—Ç",
                    value=self.match_format.upper(),
                    inline=True
                )
                
                embed.add_field(
                    name="–°—Ç–∞—Ç—É—Å",
                    value="–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤",
                    inline=True
                )
                
                await thread.send(
                    f"üéÆ **–ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω!**\n\n"
                    f"**–ò–≥—Ä–æ–∫ 1**: {self.challenger.mention}\n"
                    f"**–ò–≥—Ä–æ–∫ 2**: {self.opponent.mention}\n"
                    f"**–§–æ—Ä–º–∞—Ç**: {self.match_format.upper()}\n\n"
                    f"–û–±–∞ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∞—Ç—á—É.",
                    embed=embed
                )
                
                await interaction.message.edit(
                    content=f"‚úÖ –ú–∞—Ç—á —Å–æ–∑–¥–∞–Ω! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ {thread.mention}",
                    view=None
                )
                
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞: {str(e)}",
                ephemeral=True
            )
    
    async def get_or_create_player(self, session, discord_id: int, username: str) -> Player:
        """Get existing player or create new one"""
        player = await session.execute(
            "SELECT * FROM players WHERE discord_id = :discord_id",
            {"discord_id": discord_id}
        )
        player = player.scalar_one_or_none()
        
        if not player:
            player = Player(discord_id=discord_id, username=username)
            session.add(player)
            await session.commit()
            await session.refresh(player)
        
        return player

class MatchManagement(commands.Cog):
    """Cog for managing match creation and management"""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.db = DatabaseManager()
        
    @app_commands.command(name="challenge", description="–í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–∞—Ç—á")
    @app_commands.describe(
        opponent="–ò–≥—Ä–æ–∫ –¥–ª—è –≤—ã–∑–æ–≤–∞",
        format="–§–æ—Ä–º–∞—Ç –º–∞—Ç—á–∞ (Bo1, Bo2, Bo3)"
    )
    async def challenge(
        self, 
        interaction: discord.Interaction, 
        opponent: discord.Member,
        format: str = "Bo1"
    ):
        """–í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–∞—Ç—á"""
        await interaction.response.defer()
        
        try:
            # Check if user is challenging themselves
            if interaction.user.id == opponent.id:
                await interaction.followup.send(
                    "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–∏ —Å–µ–±—è –Ω–∞ –º–∞—Ç—á.",
                    ephemeral=True
                )
                return
            
            # Check if opponent is a bot
            if opponent.bot:
                await interaction.followup.send(
                    "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ –º–∞—Ç—á.",
                    ephemeral=True
                )
                return
            
            # Check season status and blocking
            season_manager = self.bot.get_cog('SeasonManager')
            if season_manager:
                can_create, reason = await season_manager.can_create_new_match(interaction.guild_id)
                if not can_create:
                    embed = discord.Embed(
                        title="üö´ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
                        description=f"**–ü—Ä–∏—á–∏–Ω–∞**: {reason}",
                        color=discord.Color.red()
                    )
                    
                    # Get season status for more details
                    season = await season_manager.get_season_status(interaction.guild_id)
                    if season:
                        embed.add_field(
                            name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ",
                            value=f"**–°–µ–∑–æ–Ω**: {season.name}\n**–°—Ç–∞—Ç—É—Å**: {season.get_status_description()}",
                            inline=False
                        )
                        
                        if season.is_ending_soon:
                            embed.add_field(
                                name="‚ö†Ô∏è –í–∞–∂–Ω–æ",
                                value="–ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ–∑–æ–Ω–∞!",
                                inline=False
                            )
                    
                    await interaction.followup.send(embed=embed, ephemeral=True)
                    return
            
            # Check if matches are restricted to specific channel
            session = await self.db.get_session()
        async with session:
                penalty_settings = await session.execute(
                    "SELECT match_channel_id FROM penalty_settings WHERE guild_id = :guild_id",
                    {"guild_id": interaction.guild_id}
                )
                penalty_settings = penalty_settings.scalar_one_or_none()
                
                if penalty_settings and penalty_settings.match_channel_id:
                    if interaction.channel_id != penalty_settings.match_channel_id:
                        await interaction.followup.send(
                            f"‚ùå –ú–∞—Ç—á–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ <#{penalty_settings.match_channel_id}>",
                            ephemeral=True
                        )
                        return
            
            # Validate match format
            if format.lower() not in ['bo1', 'bo2', 'bo3']:
                await interaction.followup.send(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ç—á–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: bo1, bo2, –∏–ª–∏ bo3",
                    ephemeral=True
                )
                return
            
            # Check if there's already an active match between these players
            session = await self.db.get_session()
        async with session:
                active_match = await session.execute(
                    """
                    SELECT m.* FROM matches m 
                    JOIN players p1 ON m.player1_id = p1.id 
                    JOIN players p2 ON m.player2_id = p2.id 
                    WHERE m.guild_id = :guild_id 
                    AND m.status NOT IN ('complete', 'annulled')
                    AND (
                        (p1.discord_id = :user_id AND p2.discord_id = :opponent_id)
                        OR (p1.discord_id = :opponent_id AND p2.discord_id = :user_id)
                    )
                    """,
                    {
                        "guild_id": interaction.guild_id,
                        "user_id": interaction.user.id,
                        "opponent_id": opponent.id
                    }
                )
                active_match = active_match.scalar_one_or_none()
                
                if active_match:
                    await interaction.followup.send(
                        f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á —Å {opponent.mention}.",
                        ephemeral=True
                    )
                    return
            
            # Create challenge view
            view = MatchJoinView(interaction.user, opponent, format)
            
            embed = discord.Embed(
                title="‚öîÔ∏è –í—ã–∑–æ–≤ –Ω–∞ –º–∞—Ç—á!",
                description=f"{interaction.user.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {opponent.mention} –Ω–∞ –º–∞—Ç—á!",
                color=discord.Color.blue()
            )
            
            embed.add_field(
                name="–§–æ—Ä–º–∞—Ç",
                value=format.upper(),
                inline=True
            )
            
            embed.add_field(
                name="–°—Ç–∞—Ç—É—Å",
                value="–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞",
                inline=True
            )
            
            await interaction.followup.send(
                f"‚öîÔ∏è **{interaction.user.mention}** –≤—ã–∑—ã–≤–∞–µ—Ç **{opponent.mention}** –Ω–∞ –º–∞—Ç—á!",
                embed=embed,
                view=view
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–∑–æ–≤–∞: {str(e)}",
                ephemeral=True
            )

async def setup(bot: commands.Bot):
    """Setup function for the cog"""
    await bot.add_cog(MatchManagement(bot))