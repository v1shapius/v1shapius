import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import View, Button, Select, Modal, TextInput
from typing import Optional, List
from database.database import DatabaseManager
from models.guild_roles import RoleType, DEFAULT_ROLE_CONFIGS, Permissions
from services.role_manager import RoleManager
import asyncio

class RoleSetupModal(Modal, title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏"):
    """Modal for setting up a guild role"""
    
    discord_role_id = TextInput(
        label="ID Discord —Ä–æ–ª–∏",
        placeholder="–í–≤–µ–¥–∏—Ç–µ ID —Ä–æ–ª–∏ Discord",
        max_length=20,
        required=True
    )
    
    role_name = TextInput(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏",
        placeholder="–û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏",
        max_length=100,
        required=True
    )
    
    description = TextInput(
        label="–û–ø–∏—Å–∞–Ω–∏–µ",
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏ –µ—ë –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
        style=discord.TextStyle.paragraph,
        max_length=500,
        required=False
    )
    
    def __init__(self, role_type: RoleType):
        super().__init__()
        self.role_type = role_type

class RoleAssignmentModal(Modal, title="–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏"):
    """Modal for assigning roles to members"""
    
    member_id = TextInput(
        label="ID —É—á–∞—Å—Ç–Ω–∏–∫–∞",
        placeholder="–í–≤–µ–¥–∏—Ç–µ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ Discord",
        max_length=20,
        required=True
    )
    
    def __init__(self, role_type: RoleType):
        super().__init__()
        self.role_type = role_type

class RoleManagementView(View):
    """View for role management interactions"""
    
    def __init__(self, guild_id: int, role_manager: RoleManager):
        super().__init__(timeout=300)
        self.guild_id = guild_id
        self.role_manager = role_manager
        
        # Add action buttons
        self.add_item(Button(
            label="üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏",
            custom_id="setup_roles",
            style=discord.ButtonStyle.primary
        ))
        
        self.add_item(Button(
            label="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å",
            custom_id="assign_role",
            style=discord.ButtonStyle.secondary
        ))
        
        self.add_item(Button(
            label="üìã –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π",
            custom_id="list_roles",
            style=discord.ButtonStyle.secondary
        ))

class RoleManagement(commands.Cog):
    """Cog for managing guild roles"""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.db = DatabaseManager()
        self.role_manager = RoleManager(bot)
        
    @app_commands.command(name="setup_roles", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞")
    @app_commands.describe(
        role_type="–¢–∏–ø —Ä–æ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    )
    async def setup_roles(self, interaction: discord.Interaction, role_type: str):
        """Setup roles for the guild"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        
        try:
            # Validate role type
            try:
                role_type_enum = RoleType(role_type.lower())
            except ValueError:
                await interaction.followup.send(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–æ–ª–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join([rt.value for rt in RoleType])}",
                    ephemeral=True
                )
                return
            
            # Show role setup modal
            modal = RoleSetupModal(role_type_enum)
            await interaction.followup.send(
                f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ {role_type_enum.value}",
                view=RoleManagementView(interaction.guild_id, self.role_manager)
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–µ–π: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="create_role", description="–°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞")
    @app_commands.describe(
        role_type="–¢–∏–ø —Ä–æ–ª–∏",
        discord_role_id="ID Discord —Ä–æ–ª–∏",
        role_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏",
        description="–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        auto_assign="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"
    )
    async def create_role(
        self, 
        interaction: discord.Interaction, 
        role_type: str, 
        discord_role_id: int, 
        role_name: str, 
        description: Optional[str] = None,
        auto_assign: bool = False
    ):
        """Create a new guild role"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        
        try:
            # Validate role type
            try:
                role_type_enum = RoleType(role_type.lower())
            except ValueError:
                await interaction.followup.send(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–æ–ª–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join([rt.value for rt in RoleType])}",
                    ephemeral=True
                )
                return
            
            # Validate Discord role exists
            discord_role = interaction.guild.get_role(discord_role_id)
            if not discord_role:
                await interaction.followup.send(
                    "‚ùå –†–æ–ª—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    ephemeral=True
                )
                return
            
            # Create role
            role = await self.role_manager.create_guild_role(
                guild_id=interaction.guild_id,
                role_type=role_type_enum,
                discord_role_id=discord_role_id,
                role_name=role_name,
                description=description,
                auto_assign=auto_assign
            )
            
            if role:
                await interaction.followup.send(
                    f"‚úÖ –†–æ–ª—å **{role_name}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
                    ephemeral=True
                )
                
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="assign_role", description="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫—É")
    @app_commands.describe(
        role_type="–¢–∏–ø —Ä–æ–ª–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è",
        member="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏"
    )
    async def assign_role(
        self, 
        interaction: discord.Interaction, 
        role_type: str, 
        member: discord.Member
    ):
        """Assign a role to a member"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        
        try:
            # Validate role type
            try:
                role_type_enum = RoleType(role_type.lower())
            except ValueError:
                await interaction.followup.send(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–æ–ª–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join([rt.value for rt in RoleType])}",
                    ephemeral=True
                )
                return
            
            # Assign role
            success = await self.role_manager.assign_role_to_member(
                guild_id=interaction.guild_id,
                member_id=member.id,
                role_type=role_type_enum
            )
            
            if success:
                await interaction.followup.send(
                    f"‚úÖ –†–æ–ª—å **{role_type_enum.value}** —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫—É {member.mention}!",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–∏.",
                    ephemeral=True
                )
                
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="remove_role", description="–£–±—Ä–∞—Ç—å —Ä–æ–ª—å —É —É—á–∞—Å—Ç–Ω–∏–∫–∞")
    @app_commands.describe(
        role_type="–¢–∏–ø —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        member="–£—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"
    )
    async def remove_role(
        self, 
        interaction: discord.Interaction, 
        role_type: str, 
        member: discord.Member
    ):
        """Remove a role from a member"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        
        try:
            # Validate role type
            try:
                role_type_enum = RoleType(role_type.lower())
            except ValueError:
                await interaction.followup.send(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–æ–ª–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join([rt.value for rt in RoleType])}",
                    ephemeral=True
                )
                return
            
            # Remove role
            success = await self.role_manager.remove_role_from_member(
                guild_id=interaction.guild_id,
                member_id=member.id,
                role_type=role_type_enum
            )
            
            if success:
                await interaction.followup.send(
                    f"‚úÖ –†–æ–ª—å **{role_type_enum.value}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention}!",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–∏.",
                    ephemeral=True
                )
                
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="list_roles", description="–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞")
    async def list_roles(self, interaction: discord.Interaction):
        """List all guild roles"""
        await interaction.response.defer()
        
        try:
            # Get guild roles
            roles = await self.role_manager.get_guild_roles(interaction.guild_id)
            
            if not roles:
                await interaction.followup.send(
                    "üìã –†–æ–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.",
                    ephemeral=True
                )
                return
            
            # Create embed
            embed = discord.Embed(
                title="üîß –†–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞",
                description=f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ —Ä–æ–ª–µ–π: {len(roles)}",
                color=discord.Color.blue()
            )
            
            for role in roles:
                role_type_emoji = {
                    "players": "üéÆ",
                    "referees": "‚öñÔ∏è",
                    "admins": "üëë",
                    "moderators": "üõ°Ô∏è",
                    "tournament_organizers": "üèÜ"
                }.get(role["type"], "‚ùì")
                
                auto_assign_text = "‚úÖ" if role["auto_assign"] else "‚ùå"
                
                embed.add_field(
                    name=f"{role_type_emoji} {role['name']}",
                    value=f"**–¢–∏–ø**: {role['type']}\n"
                          f"**ID**: {role['discord_role_id']}\n"
                          f"**–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ**: {auto_assign_text}\n"
                          f"**–†–∞–∑—Ä–µ—à–µ–Ω–∏—è**: {len(role['permissions'])}",
                    inline=True
                )
            
            await interaction.followup.send(
                f"üîß **–†–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞**",
                embed=embed
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–ª–µ–π: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="setup_default_roles", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    async def setup_default_roles(self, interaction: discord.Interaction):
        """Setup default roles for the guild"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ–ª–µ–π.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        
        try:
            # Setup default roles
            success = await self.role_manager.setup_default_roles(
                guild_id=interaction.guild_id,
                guild_name=interaction.guild.name
            )
            
            if success:
                await interaction.followup.send(
                    "‚úÖ –†–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n"
                    "**–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏:**\n"
                    "üéÆ **–ò–≥—Ä–æ–∫–∏** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
                    "‚öñÔ∏è **–°—É–¥—å–∏** - –î–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç—á–µ–π\n"
                    "üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã** - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\n"
                    "üèÜ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤** - –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n"
                    "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Discord —Ä–æ–ª–∏ –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö ID.",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–æ–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
                    ephemeral=True
                )
                
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–æ–ª–µ–π: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="test_role_tagging", description="–¢–µ—Å—Ç —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π")
    @app_commands.describe(
        event_type="–¢–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    async def test_role_tagging(self, interaction: discord.Interaction, event_type: str):
        """Test role tagging for different events"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        
        try:
            # Test role tagging
            tagged_message = await self.role_manager.tag_role_for_event(
                guild_id=interaction.guild_id,
                event_type=event_type,
                message="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π."
            )
            
            await interaction.followup.send(
                f"üîî **–¢–µ—Å—Ç —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π**\n\n"
                f"**–¢–∏–ø —Å–æ–±—ã—Ç–∏—è**: {event_type}\n"
                f"**–†–µ–∑—É–ª—å—Ç–∞—Ç**:\n{tagged_message}",
                ephemeral=True
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}",
                ephemeral=True
            )
    
    @commands.Cog.listener()
    async def on_guild_join(self, guild):
        """Automatically setup default roles when bot joins a guild"""
        try:
            logger.info(f"Bot joined guild: {guild.name} (ID: {guild.id})")
            
            # Setup default roles
            await self.role_manager.setup_default_roles(
                guild_id=guild.id,
                guild_name=guild.name
            )
            
            # Send welcome message to system channel
            if guild.system_channel:
                embed = discord.Embed(
                    title="üéÆ Discord Rating Bot –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!",
                    description="–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–∏–ª —Ä–æ–ª–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.",
                    color=discord.Color.green()
                )
                
                embed.add_field(
                    name="üîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:",
                    value="1. –°–æ–∑–¥–∞–π—Ç–µ Discord —Ä–æ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤, —Å—É–¥–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
                          "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/setup_default_roles` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
                          "3. –£–∫–∞–∂–∏—Ç–µ ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Discord —Ä–æ–ª–µ–π\n"
                          "4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π",
                    inline=False
                )
                
                embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
                
                try:
                    await guild.system_channel.send(embed=embed)
                except discord.Forbidden:
                    logger.warning(f"Could not send welcome message to guild {guild.id}")
                    
        except Exception as e:
            logger.error(f"Error setting up guild {guild.id}: {e}")

async def setup(bot: commands.Bot):
    """Setup function for the cog"""
    await bot.add_cog(RoleManagement(bot))