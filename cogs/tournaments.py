import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import View, Button, Select, Modal, TextInput
from typing import Optional, List
from database.database import DatabaseManager
from models.tournament import Tournament, TournamentStatus, TournamentFormat, TournamentParticipant
from services.tournament_service import TournamentService
import asyncio

class TournamentCreationModal(Modal, title="–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"):
    """Modal for creating a new tournament"""
    
    name = TextInput(
        label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
        max_length=200,
        required=True
    )
    
    description = TextInput(
        label="–û–ø–∏—Å–∞–Ω–∏–µ",
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø—Ä–∞–≤–∏–ª–∞",
        style=discord.TextStyle.paragraph,
        max_length=1000,
        required=False
    )
    
    rules = TextInput(
        label="–ü—Ä–∞–≤–∏–ª–∞",
        placeholder="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞",
        style=discord.TextStyle.paragraph,
        max_length=1000,
        required=False
    )
    
    prize_pool = TextInput(
        label="–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥",
        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–∑–æ–≤",
        max_length=500,
        required=False
    )
    
    def __init__(self, tournament_service: TournamentService):
        super().__init__()
        self.tournament_service = tournament_service

class TournamentView(View):
    """View for tournament interactions"""
    
    def __init__(self, tournament_id: int, tournament_service: TournamentService):
        super().__init__(timeout=300)
        self.tournament_id = tournament_id
        self.tournament_service = tournament_service
        
        # Add action buttons
        self.add_item(Button(
            label="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            custom_id="register_tournament",
            style=discord.ButtonStyle.primary
        ))
        
        self.add_item(Button(
            label="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            custom_id="tournament_info",
            style=discord.ButtonStyle.secondary
        ))
        
        self.add_item(Button(
            label="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            custom_id="tournament_participants",
            style=discord.ButtonStyle.secondary
        ))

class Tournaments(commands.Cog):
    """Cog for managing tournaments"""
    
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.db = DatabaseManager()
        self.tournament_service = TournamentService(bot)
        
    @app_commands.command(name="create_tournament", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä")
    @app_commands.describe(
        name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞",
        format="–§–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞",
        match_format="–§–æ—Ä–º–∞—Ç –º–∞—Ç—á–µ–π",
        min_participants="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
        max_participants="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        registration_days="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
    )
    async def create_tournament(
        self,
        interaction: discord.Interaction,
        name: str,
        format: str,
        match_format: str,
        min_participants: int,
        max_participants: Optional[int],
        registration_days: int
    ):
        """Create a new tournament"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤.",
                ephemeral=True
            )
            return
        
        await interaction.response.defer()
        
        try:
            # Validate format
            try:
                tournament_format = TournamentFormat(format.lower())
            except ValueError:
                await interaction.followup.send(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join([f.value for f in TournamentFormat])}",
                    ephemeral=True
                )
                return
            
            # Validate match format
            valid_match_formats = ["bo1", "bo3", "bo5"]
            if match_format.lower() not in valid_match_formats:
                await interaction.followup.send(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–∞—Ç—á–µ–π. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(valid_match_formats)}",
                    ephemeral=True
                )
                return
            
            # Validate participants
            if min_participants < 2:
                await interaction.followup.send(
                    "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2.",
                    ephemeral=True
                )
                return
            
            if max_participants and max_participants < min_participants:
                await interaction.followup.send(
                    "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ.",
                    ephemeral=True
                )
                return
            
            # Create tournament
            tournament = await self.tournament_service.create_tournament(
                name=name,
                description="",
                guild_id=interaction.guild_id,
                format=tournament_format,
                match_format=match_format.lower(),
                min_participants=min_participants,
                max_participants=max_participants,
                registration_days=registration_days
            )
            
            # Create embed
            embed = self.create_tournament_embed(tournament)
            
            # Create view
            view = TournamentView(tournament.id, self.tournament_service)
            
            await interaction.followup.send(
                f"üèÖ **–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!**",
                embed=embed,
                view=view
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="tournaments", description="–°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
    @app_commands.describe(status="–°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    async def list_tournaments(self, interaction: discord.Interaction, status: Optional[str] = None):
        """List tournaments in the guild"""
        await interaction.response.defer()
        
        try:
            # Parse status if provided
            tournament_status = None
            if status:
                try:
                    tournament_status = TournamentStatus(status.lower())
                except ValueError:
                    await interaction.followup.send(
                        f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {', '.join([s.value for s in TournamentStatus])}",
                        ephemeral=True
                    )
                    return
            
            # Get tournaments
            tournaments = await self.tournament_service.get_guild_tournaments(
                interaction.guild_id, 
                tournament_status
            )
            
            if not tournaments:
                await interaction.followup.send(
                    "üìã –í —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤.",
                    ephemeral=True
                )
                return
            
            # Create embed
            embed = self.create_tournaments_list_embed(tournaments)
            
            await interaction.followup.send(
                f"üèÖ **–¢—É—Ä–Ω–∏—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞**",
                embed=embed
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="register_tournament", description="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä")
    @app_commands.describe(tournament_id="ID —Ç—É—Ä–Ω–∏—Ä–∞")
    async def register_tournament(self, interaction: discord.Interaction, tournament_id: int):
        """Register for a tournament"""
        await interaction.response.defer()
        
        try:
            # Get player ID
            session = await self.db.get_session()
        async with session as session:
                player = await session.execute(
                    "SELECT id FROM players WHERE discord_id = :discord_id",
                    {"discord_id": interaction.user.id}
                )
                player = player.scalar_one_or_none()
                
                if not player:
                    await interaction.followup.send(
                        "‚ùå –í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –°–Ω–∞—á–∞–ª–∞ —Å—ã–≥—Ä–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∞—Ç—á.",
                        ephemeral=True
                    )
                    return
                
                player_id = player.id
            
            # Register for tournament
            success = await self.tournament_service.register_player(tournament_id, player_id)
            
            if success:
                await interaction.followup.send(
                    f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!",
                    ephemeral=True
                )
            else:
                await interaction.followup.send(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—É—Ä–Ω–∏—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
                    ephemeral=True
                )
                
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="tournament_info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ")
    @app_commands.describe(tournament_id="ID —Ç—É—Ä–Ω–∏—Ä–∞")
    async def tournament_info(self, interaction: discord.Interaction, tournament_id: int):
        """Get detailed tournament information"""
        await interaction.response.defer()
        
        try:
            # Get tournament info
            tournament_info = await self.tournament_service.get_tournament_info(tournament_id)
            
            if not tournament_info:
                await interaction.followup.send(
                    "‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    ephemeral=True
                )
                return
            
            # Create embed
            embed = self.create_detailed_tournament_embed(tournament_info)
            
            await interaction.followup.send(
                f"üèÖ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ**",
                embed=embed
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ: {str(e)}",
                ephemeral=True
            )
    
    def create_tournament_embed(self, tournament) -> discord.Embed:
        """Create embed for tournament display"""
        embed = discord.Embed(
            title=f"üèÖ {tournament.name}",
            description="–ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!",
            color=discord.Color.green()
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å",
            value=tournament.status.value.replace('_', ' ').title(),
            inline=True
        )
        
        embed.add_field(
            name="üèÜ –§–æ—Ä–º–∞—Ç",
            value=tournament.format.value.replace('_', ' ').title(),
            inline=True
        )
        
        embed.add_field(
            name="üéÆ –ú–∞—Ç—á–∏",
            value=tournament.match_format.upper(),
            inline=True
        )
        
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value=f"–ú–∏–Ω–∏–º—É–º: {tournament.min_participants}\n–ú–∞–∫—Å–∏–º—É–º: {tournament.max_participants or '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'}",
            inline=True
        )
        
        embed.add_field(
            name="‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            value=f"–î–æ: {tournament.registration_end.strftime('%d.%m.%Y %H:%M')}",
            inline=True
        )
        
        if tournament.rules:
            embed.add_field(
                name="üìã –ü—Ä–∞–≤–∏–ª–∞",
                value=tournament.rules[:1024],
                inline=False
            )
        
        if tournament.prize_pool:
            embed.add_field(
                name="üèÜ –ü—Ä–∏–∑—ã",
                value=tournament.prize_pool[:1024],
                inline=False
            )
        
        embed.set_footer(text=f"ID —Ç—É—Ä–Ω–∏—Ä–∞: {tournament.id}")
        
        return embed
    
    def create_tournaments_list_embed(self, tournaments: List[dict]) -> discord.Embed:
        """Create embed for tournaments list"""
        embed = discord.Embed(
            title="üèÖ –¢—É—Ä–Ω–∏—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞",
            description=f"–ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {len(tournaments)}",
            color=discord.Color.blue()
        )
        
        for tournament in tournaments[:10]:  # Show first 10
            status_emoji = {
                "registration": "üìù",
                "active": "üèÜ",
                "completed": "‚úÖ",
                "cancelled": "‚ùå"
            }.get(tournament["status"], "‚ùì")
            
            embed.add_field(
                name=f"{status_emoji} {tournament['name']}",
                value=f"**–§–æ—Ä–º–∞—Ç**: {tournament['format'].replace('_', ' ').title()}\n"
                      f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏**: {tournament['participant_count']}/{tournament.get('max_participants', '‚àû')}\n"
                      f"**–°—Ç–∞—Ç—É—Å**: {tournament['status'].replace('_', ' ').title()}\n"
                      f"**ID**: {tournament['id']}",
                inline=True
            )
        
        if len(tournaments) > 10:
            embed.set_footer(text=f"–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(tournaments)} —Ç—É—Ä–Ω–∏—Ä–æ–≤")
        
        return embed
    
    def create_detailed_tournament_embed(self, tournament_info: dict) -> discord.Embed:
        """Create detailed embed for tournament information"""
        embed = discord.Embed(
            title=f"üèÖ {tournament_info['name']}",
            description=tournament_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
            color=discord.Color.gold()
        )
        
        # Status and format
        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å",
            value=tournament_info['status'].replace('_', ' ').title(),
            inline=True
        )
        
        embed.add_field(
            name="üèÜ –§–æ—Ä–º–∞—Ç",
            value=tournament_info['format'].replace('_', ' ').title(),
            inline=True
        )
        
        embed.add_field(
            name="üéÆ –ú–∞—Ç—á–∏",
            value=tournament_info.get('match_format', 'N/A').upper(),
            inline=True
        )
        
        # Participants and matches
        embed.add_field(
            name="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏",
            value=f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {tournament_info['participant_count']}",
            inline=True
        )
        
        embed.add_field(
            name="üéØ –ú–∞—Ç—á–∏",
            value=f"–í—Å–µ–≥–æ: {tournament_info['match_count']}",
            inline=True
        )
        
        # Timing
        if tournament_info.get('registration_start'):
            embed.add_field(
                name="‚è∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
                value=f"–ù–∞—á–∞–ª–æ: {tournament_info['registration_start'].strftime('%d.%m.%Y %H:%M')}\n"
                      f"–ö–æ–Ω–µ—Ü: {tournament_info['registration_end'].strftime('%d.%m.%Y %H:%M')}",
                inline=False
            )
        
        if tournament_info.get('tournament_start'):
            embed.add_field(
                name="üèÅ –¢—É—Ä–Ω–∏—Ä",
                value=f"–ù–∞—á–∞–ª–æ: {tournament_info['tournament_start'].strftime('%d.%m.%Y %H:%M')}",
                inline=True
            )
        
        if tournament_info.get('tournament_end'):
            embed.add_field(
                name="üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ",
                value=f"–ö–æ–Ω–µ—Ü: {tournament_info['tournament_end'].strftime('%d.%m.%Y %H:%M')}",
                inline=True
            )
        
        # Rules and prizes
        if tournament_info.get('rules'):
            embed.add_field(
                name="üìã –ü—Ä–∞–≤–∏–ª–∞",
                value=tournament_info['rules'][:1024],
                inline=False
            )
        
        if tournament_info.get('prize_pool'):
            embed.add_field(
                name="üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥",
                value=tournament_info['prize_pool'][:1024],
                inline=False
            )
        
        embed.set_footer(text=f"ID —Ç—É—Ä–Ω–∏—Ä–∞: {tournament_info['id']}")
        
        return embed

async def setup(bot: commands.Bot):
    """Setup function for the cog"""
    await bot.add_cog(Tournaments(bot))