import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button, Select
from typing import Optional, List
import time
from database.database import DatabaseManager
from models.match import Match, MatchStatus, MatchStage
from models.referee_case import RefereeCase, CaseType, CaseStatus, ResolutionType
from models.referee import Referee
from models.penalty_settings import PenaltySettings

class RefereeCallModal(Modal, title="–í—ã–∑–æ–≤ —Å—É–¥—å–∏"):
    def __init__(self, match_id: int, stage: str):
        super().__init__()
        self.match_id = match_id
        self.stage = stage
        
        self.problem_description = TextInput(
            label="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–Ω–∏–∫–ª–∞ –≤–æ –≤—Ä–µ–º—è –º–∞—Ç—á–∞...",
            required=True,
            max_length=1000,
            style=discord.TextStyle.paragraph
        )
        
        self.evidence = TextInput(
            label="–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            placeholder="–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –≤–∏–¥–µ–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞...",
            required=False,
            max_length=500
        )
        
        self.add_item(self.problem_description)
        self.add_item(self.evidence)

class RefereeCaseView(View):
    def __init__(self, case: RefereeCase, match: Match, is_referee: bool = False):
        super().__init__(timeout=None)
        self.case = case
        self.match = match
        self.is_referee = is_referee
        
        if is_referee:
            # Referee actions
            self.add_item(Button(
                label="üìù –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ",
                custom_id="start_resolution",
                style=discord.ButtonStyle.primary
            ))
            self.add_item(Button(
                label="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∞—Ç—á",
                custom_id="continue_match",
                style=discord.ButtonStyle.success
            ))
            self.add_item(Button(
                label="üîÑ –ü–µ—Ä–µ–∏–≥—Ä–∞—Ç—å –∏–≥—Ä—É",
                custom_id="replay_game",
                style=discord.ButtonStyle.secondary
            ))
            self.add_item(Button(
                label="‚ùå –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á",
                custom_id="annull_match",
                style=discord.ButtonStyle.danger
            ))
        else:
            # Player view
            self.add_item(Button(
                label="üìã –°—Ç–∞—Ç—É—Å –¥–µ–ª–∞",
                custom_id="case_status",
                style=discord.ButtonStyle.secondary
            ))

class RefereeResolutionModal(Modal, title="–†–µ—à–µ–Ω–∏–µ —Å—É–¥—å–∏"):
    def __init__(self, case: RefereeCase, resolution_type: str):
        super().__init__()
        self.case = case
        self.resolution_type = resolution_type
        
        self.resolution_details = TextInput(
            label="–î–µ—Ç–∞–ª–∏ —Ä–µ—à–µ–Ω–∏—è",
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É...",
            required=True,
            max_length=1000,
            style=discord.TextStyle.paragraph
        )
        
        self.referee_notes = TextInput(
            label="–ó–∞–º–µ—Ç–∫–∏ —Å—É–¥—å–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è...",
            required=False,
            max_length=500
        )
        
        self.add_item(self.resolution_details)
        self.add_item(self.referee_notes)

class RefereeSystem(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.db = DatabaseManager()
        
    @app_commands.command(name="call_referee", description="–í—ã–∑–≤–∞—Ç—å —Å—É–¥—å—é –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã")
    @app_commands.describe(
        problem_type="–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã",
        description="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
    )
    async def call_referee(
        self, 
        interaction: discord.Interaction,
        problem_type: str,
        description: str
    ):
        """–í—ã–∑–≤–∞—Ç—å —Å—É–¥—å—é –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        await interaction.response.defer()
        
        try:
            # Check if user is in an active match
            async with self.db.get_session() as session:
                # Find active match for this user
                match = await session.execute(
                    """
                    SELECT m.* FROM matches m 
                    JOIN players p1 ON m.player1_id = p1.id 
                    JOIN players p2 ON m.player2_id = p2.id 
                    WHERE m.guild_id = :guild_id 
                    AND m.status NOT IN ('complete', 'annulled')
                    AND (p1.discord_id = :user_id OR p2.discord_id = :user_id)
                    """,
                    {
                        "guild_id": interaction.guild_id,
                        "user_id": interaction.user.id
                    }
                )
                match = match.scalar_one_or_none()
                
                if not match:
                    await interaction.followup.send(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å—É–¥—å–∏.",
                        ephemeral=True
                    )
                    return
                
                if match.status == MatchStatus.REFEREE_INTERVENTION:
                    await interaction.followup.send(
                        "‚ùå –°—É–¥—å—è —É–∂–µ –≤—ã–∑–≤–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞.",
                        ephemeral=True
                    )
                    return
                
                # Determine case type based on problem description
                case_type = self.determine_case_type(problem_type, match.current_stage)
                
                # Create referee case
                referee_case = RefereeCase(
                    match_id=match.id,
                    case_type=case_type,
                    reported_by=interaction.user.id,
                    problem_description=description,
                    stage_when_reported=match.current_stage.value
                )
                
                session.add(referee_case)
                
                # Update match status
                match.call_referee(None, description)
                
                await session.commit()
                
                # Create case view
                view = RefereeCaseView(referee_case, match)
                
                # Send notification to match thread
                if match.thread_id:
                    thread = interaction.guild.get_thread(match.thread_id)
                    if thread:
                        embed = discord.Embed(
                            title="üö® –í—ã–∑–æ–≤ —Å—É–¥—å–∏!",
                            description="–ò–≥—Ä–æ–∫ –≤—ã–∑–≤–∞–ª —Å—É–¥—å—é –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã",
                            color=discord.Color.red()
                        )
                        
                        embed.add_field(
                            name="–ü—Ä–æ–±–ª–µ–º–∞",
                            value=description,
                            inline=False
                        )
                        
                        embed.add_field(
                            name="–≠—Ç–∞–ø –º–∞—Ç—á–∞",
                            value=match.current_stage.value,
                            inline=True
                        )
                        
                        embed.add_field(
                            name="–ó–∞—è–≤–∏—Ç–µ–ª—å",
                            value=interaction.user.mention,
                            inline=True
                        )
                        
                        embed.add_field(
                            name="–°—Ç–∞—Ç—É—Å",
                            value="‚è≥ –û–∂–∏–¥–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—É–¥—å–∏",
                            inline=True
                        )
                        
                        await thread.send(
                            f"üö® **–í–ù–ò–ú–ê–ù–ò–ï!** –ú–∞—Ç—á –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—É–¥—å—è.\n\n{interaction.user.mention} –≤—ã–∑–≤–∞–ª —Å—É–¥—å—é –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
                            embed=embed,
                            view=view
                        )
                        
                        await interaction.followup.send(
                            f"‚úÖ –°—É–¥—å—è –≤—ã–∑–≤–∞–Ω! –ú–∞—Ç—á –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—É–¥—å–∏ –≤ {thread.mention}",
                            ephemeral=True
                        )
                    else:
                        await interaction.followup.send(
                            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–µ—Ç–∫—É –º–∞—Ç—á–∞.",
                            ephemeral=True
                        )
                else:
                    await interaction.followup.send(
                        "‚ùå –û—à–∏–±–∫–∞: –º–∞—Ç—á –Ω–µ –∏–º–µ–µ—Ç –≤–µ—Ç–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
                        ephemeral=True
                    )
                    
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å—É–¥—å–∏: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="referee_cases", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å—É–¥–µ–π—Å—Ç–≤–∞")
    async def view_referee_cases(self, interaction: discord.Interaction):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å—É–¥–µ–π—Å—Ç–≤–∞"""
        await interaction.response.defer()
        
        try:
            async with self.db.get_session() as session:
                # Check if user is a referee
                referee = await session.execute(
                    "SELECT * FROM referees WHERE discord_id = :discord_id AND guild_id = :guild_id AND is_active = true",
                    {"discord_id": interaction.user.id, "guild_id": interaction.guild_id}
                )
                referee = referee.scalar_one_or_none()
                
                if not referee:
                    await interaction.followup.send(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–¥—å–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª—É—á–∞–µ–≤.",
                        ephemeral=True
                    )
                    return
                
                # Get active cases
                active_cases = await session.execute(
                    """
                    SELECT rc.*, m.thread_id, p1.username as player1_name, p2.username as player2_name
                    FROM referee_cases rc
                    JOIN matches m ON rc.match_id = m.id
                    JOIN players p1 ON m.player1_id = p1.id
                    JOIN players p2 ON m.player2_id = p2.id
                    WHERE rc.status IN ('opened', 'assigned', 'in_progress')
                    AND m.guild_id = :guild_id
                    ORDER BY rc.created_at DESC
                    """,
                    {"guild_id": interaction.guild_id}
                )
                active_cases = active_cases.fetchall()
                
                if not active_cases:
                    await interaction.followup.send(
                        "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å—É–¥–µ–π—Å—Ç–≤–∞.",
                        ephemeral=True
                    )
                    return
                
                # Create cases embed
                embed = discord.Embed(
                    title="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª—É—á–∞–∏ —Å—É–¥–µ–π—Å—Ç–≤–∞",
                    description=f"–ù–∞–π–¥–µ–Ω–æ {len(active_cases)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤",
                    color=discord.Color.orange()
                )
                
                for case in active_cases[:5]:  # Show first 5 cases
                    status_emoji = {
                        "opened": "‚è≥",
                        "assigned": "üë®‚Äç‚öñÔ∏è",
                        "in_progress": "üîç"
                    }.get(case.status, "‚ùì")
                    
                    embed.add_field(
                        name=f"{status_emoji} –î–µ–ª–æ #{case.id}",
                        value=f"""
                        **–ú–∞—Ç—á**: {case.player1_name} vs {case.player2_name}
                        **–¢–∏–ø**: {case.case_type.value}
                        **–°—Ç–∞—Ç—É—Å**: {case.status.value}
                        **–≠—Ç–∞–ø**: {case.stage_when_reported}
                        """,
                        inline=False
                    )
                
                if len(active_cases) > 5:
                    embed.set_footer(text=f"–ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(active_cases)} —Å–ª—É—á–∞–µ–≤")
                
                await interaction.followup.send(embed=embed)
                
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–µ–≤: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="take_case", description="–í–∑—è—Ç—å –¥–µ–ª–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ")
    @app_commands.describe(case_id="ID –¥–µ–ª–∞ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è")
    async def take_case(self, interaction: discord.Interaction, case_id: int):
        """–í–∑—è—Ç—å –¥–µ–ª–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"""
        await interaction.response.defer()
        
        try:
            async with self.db.get_session() as session:
                # Check if user is a referee
                referee = await session.execute(
                    "SELECT * FROM referees WHERE discord_id = :discord_id AND guild_id = :guild_id AND is_active = true",
                    {"discord_id": interaction.user.id, "guild_id": interaction.guild_id}
                )
                referee = referee.scalar_one_or_none()
                
                if not referee:
                    await interaction.followup.send(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–¥—å–∏ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –¥–µ–ª.",
                        ephemeral=True
                    )
                    return
                
                # Get the case
                case = await session.execute(
                    "SELECT * FROM referee_cases WHERE id = :case_id",
                    {"case_id": case_id}
                )
                case = case.scalar_one_or_none()
                
                if not case:
                    await interaction.followup.send(
                        "‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                        ephemeral=True
                    )
                    return
                
                if not case.can_be_assigned():
                    await interaction.followup.send(
                        "‚ùå –≠—Ç–æ –¥–µ–ª–æ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–æ.",
                        ephemeral=True
                    )
                    return
                
                # Get match for guild check
                match = await session.execute(
                    "SELECT * FROM matches WHERE id = :match_id",
                    {"match_id": case.match_id}
                )
                match = match.scalar_one_or_none()
                
                if not match or match.guild_id != interaction.guild_id:
                    await interaction.followup.send(
                        "‚ùå –î–µ–ª–æ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É —Å–µ—Ä–≤–µ—Ä—É.",
                        ephemeral=True
                    )
                    return
                
                # Assign case to referee
                case.assign_referee(interaction.user.id)
                case.start_resolution()
                
                await session.commit()
                
                await interaction.followup.send(
                    f"‚úÖ –î–µ–ª–æ #{case_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≤–∞–º –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.",
                    ephemeral=True
                )
                
                # Notify in match thread
                if match.thread_id:
                    thread = interaction.guild.get_thread(match.thread_id)
                    if thread:
                        embed = discord.Embed(
                            title="üë®‚Äç‚öñÔ∏è –°—É–¥—å—è –Ω–∞–∑–Ω–∞—á–µ–Ω!",
                            description=f"–î–µ–ª–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å—É–¥—å–µ {interaction.user.mention}",
                            color=discord.Color.blue()
                        )
                        
                        embed.add_field(
                            name="–°—Ç–∞—Ç—É—Å",
                            value="üîç –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è —Å—É–¥—å–µ–π",
                            inline=True
                        )
                        
                        embed.add_field(
                            name="–°—É–¥—å—è",
                            value=interaction.user.mention,
                            inline=True
                        )
                        
                        await thread.send(embed=embed)
                
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –¥–µ–ª–∞: {str(e)}",
                ephemeral=True
            )
    
    @app_commands.command(name="resolve_case", description="–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–ª—É—á–∞–π —Å—É–¥–µ–π—Å—Ç–≤–∞")
    @app_commands.describe(
        case_id="ID –¥–µ–ª–∞ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
        resolution_type="–¢–∏–ø —Ä–µ—à–µ–Ω–∏—è",
        details="–î–µ—Ç–∞–ª–∏ —Ä–µ—à–µ–Ω–∏—è"
    )
    async def resolve_case(
        self, 
        interaction: discord.Interaction,
        case_id: int,
        resolution_type: str,
        details: str
    ):
        """–†–∞–∑—Ä–µ—à–∏—Ç—å —Å–ª—É—á–∞–π —Å—É–¥–µ–π—Å—Ç–≤–∞"""
        await interaction.response.defer()
        
        try:
            async with self.db.get_session() as session:
                # Check if user is a referee
                referee = await session.execute(
                    "SELECT * FROM referees WHERE discord_id = :discord_id AND guild_id = :guild_id AND is_active = true",
                    {"discord_id": interaction.user.id, "guild_id": interaction.guild_id}
                )
                referee = referee.scalar_one_or_none()
                
                if not referee:
                    await interaction.followup.send(
                        "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å—É–¥—å–∏ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–µ–ª.",
                        ephemeral=True
                    )
                    return
                
                # Get the case
                case = await session.execute(
                    "SELECT * FROM referee_cases WHERE id = :case_id AND referee_id = :referee_id",
                    {"case_id": case_id, "referee_id": interaction.user.id}
                )
                case = case.scalar_one_or_none()
                
                if not case:
                    await interaction.followup.send(
                        "‚ùå –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ –≤–∞–º.",
                        ephemeral=True
                    )
                    return
                
                # Get match
                match = await session.execute(
                    "SELECT * FROM matches WHERE id = :match_id",
                    {"match_id": case.match_id}
                )
                match = match.scalar_one_or_none()
                
                if not match:
                    await interaction.followup.send(
                        "‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                        ephemeral=True
                    )
                    return
                
                # Parse resolution type
                try:
                    resolution_enum = ResolutionType(resolution_type.lower())
                except ValueError:
                    await interaction.followup.send(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ—à–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: continue_match, modify_results, replay_game, annull_match, warning_issued, other",
                        ephemeral=True
                    )
                    return
                
                # Resolve the case
                case.resolve_case(resolution_enum, details)
                
                # Handle match based on resolution
                if resolution_enum == ResolutionType.ANNULL_MATCH:
                    match.annul_match(details)
                elif resolution_enum == ResolutionType.CONTINUE_MATCH:
                    match.resolve_referee_intervention(details)
                
                # Update referee statistics
                referee.increment_cases_resolved()
                if resolution_enum == ResolutionType.ANNULL_MATCH:
                    referee.increment_matches_annulled()
                
                await session.commit()
                
                await interaction.followup.send(
                    f"‚úÖ –î–µ–ª–æ #{case_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ.",
                    ephemeral=True
                )
                
                # Notify in match thread
                if match.thread_id:
                    thread = interaction.guild.get_thread(match.thread_id)
                    if thread:
                        embed = discord.Embed(
                            title="‚úÖ –°–ª—É—á–∞–π —Å—É–¥–µ–π—Å—Ç–≤–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω",
                            description=f"–°—É–¥—å—è {interaction.user.mention} —Ä–∞–∑—Ä–µ—à–∏–ª –ø—Ä–æ–±–ª–µ–º—É",
                            color=discord.Color.green()
                        )
                        
                        embed.add_field(
                            name="–†–µ—à–µ–Ω–∏–µ",
                            value=resolution_enum.value,
                            inline=True
                        )
                        
                        embed.add_field(
                            name="–î–µ—Ç–∞–ª–∏",
                            value=details,
                            inline=False
                        )
                        
                        if resolution_enum == ResolutionType.ANNULL_MATCH:
                            embed.add_field(
                                name="–°—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞",
                                value="‚ùå –ú–∞—Ç—á –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω",
                                inline=True
                            )
                        elif resolution_enum == ResolutionType.CONTINUE_MATCH:
                            embed.add_field(
                                name="–°—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞",
                                value="‚ñ∂Ô∏è –ú–∞—Ç—á –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è",
                                inline=True
                            )
                        
                        await thread.send(embed=embed)
                
        except Exception as e:
            await interaction.followup.send(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –¥–µ–ª–∞: {str(e)}",
                ephemeral=True
            )
    
    def determine_case_type(self, problem_type: str, match_stage: MatchStage) -> CaseType:
        """Determine case type based on problem description and match stage"""
        problem_lower = problem_type.lower()
        
        if "–¥—Ä–∞—Ñ—Ç" in problem_lower or "draft" in problem_lower:
            return CaseType.DRAFT_DISPUTE
        elif "—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è" in problem_lower or "—Å—Ç—Ä–∏–º" in problem_lower or "stream" in problem_lower:
            return CaseType.STREAM_ISSUE
        elif "–≤—Ä–µ–º—è" in problem_lower or "time" in problem_lower:
            return CaseType.TIME_DISPUTE
        elif "—Ä–µ–∑—É–ª—å—Ç–∞—Ç" in problem_lower or "result" in problem_lower:
            return CaseType.RESULT_DISPUTE
        elif "–ø—Ä–∞–≤–∏–ª–∞" in problem_lower or "rules" in problem_lower:
            return CaseType.RULE_VIOLATION
        elif "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è" in problem_lower or "technical" in problem_lower:
            return CaseType.TECHNICAL_ISSUE
        else:
            return CaseType.OTHER

async def setup(bot: commands.Bot):
    await bot.add_cog(RefereeSystem(bot))