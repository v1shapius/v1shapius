import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button
from typing import Optional
from database.database import DatabaseManager
from locales import LocaleManager
from models.penalty_settings import PenaltySettings

class GuildSettingsModal(Modal, title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"):
    def __init__(self, current_settings: Optional[PenaltySettings] = None):
        super().__init__()
        self.current_settings = current_settings
        
        self.restart_penalty = TextInput(
            label="–®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç (—Å–µ–∫—É–Ω–¥—ã)",
            placeholder="30",
            default=str(current_settings.restart_penalty) if current_settings else "30",
            required=True,
            min_length=1,
            max_length=3
        )
        
        self.add_item(self.restart_penalty)

class DetailedPenaltyModal(Modal, title="–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—ã"):
    def __init__(self, current_settings: Optional[PenaltySettings] = None):
        super().__init__()
        self.current_settings = current_settings
        
        # Get current values or defaults
        penalties = current_settings.restart_penalties if current_settings else {
            "free_restarts": 2,
            "penalty_tiers": {"3": 5, "4": 15, "5": 999}
        }
        
        self.free_restarts = TextInput(
            label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–µ—Å—Ç–∞—Ä—Ç–æ–≤",
            placeholder="2",
            default=str(penalties.get("free_restarts", 2)),
            required=True,
            min_length=1,
            max_length=2
        )
        
        self.tier3_penalty = TextInput(
            label="–®—Ç—Ä–∞—Ñ –∑–∞ 3-–π —Ä–µ—Å—Ç–∞—Ä—Ç (—Å–µ–∫—É–Ω–¥—ã)",
            placeholder="5",
            default=str(penalties.get("penalty_tiers", {}).get("3", 5)),
            required=True,
            min_length=1,
            max_length=3
        )
        
        self.tier4_penalty = TextInput(
            label="–®—Ç—Ä–∞—Ñ –∑–∞ 4-–π —Ä–µ—Å—Ç–∞—Ä—Ç (—Å–µ–∫—É–Ω–¥—ã)",
            placeholder="15",
            default=str(penalties.get("penalty_tiers", {}).get("4", 15)),
            required=True,
            min_length=1,
            max_length=3
        )
        
        self.tier5_penalty = TextInput(
            label="–®—Ç—Ä–∞—Ñ –∑–∞ 5-–π —Ä–µ—Å—Ç–∞—Ä—Ç (—Å–µ–∫—É–Ω–¥—ã)",
            placeholder="999",
            default=str(penalties.get("penalty_tiers", {}).get("5", 999)),
            required=True,
            min_length=1,
            max_length=3
        )
        
        self.add_item(self.free_restarts)
        self.add_item(self.tier3_penalty)
        self.add_item(self.tier4_penalty)
        self.add_item(self.tier5_penalty)
    
    async def on_submit(self, interaction: discord.Interaction):
        """Handle modal submission"""
        try:
            # Validate input
            free_restarts = int(self.free_restarts.value)
            tier3_penalty = int(self.tier3_penalty.value)
            tier4_penalty = int(self.tier4_penalty.value)
            tier5_penalty = int(self.tier5_penalty.value)
            
            if free_restarts < 0 or tier3_penalty < 0 or tier4_penalty < 0 or tier5_penalty < 0:
                await interaction.response.send_message(
                    "‚ùå –®—Ç—Ä–∞—Ñ—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏.",
                    ephemeral=True
                )
                return
            
            # Update penalty settings
            async with DatabaseManager().get_session() as session:
                settings = await session.get(PenaltySettings, interaction.guild_id)
                
                if not settings:
                    await interaction.response.send_message(
                        "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                        ephemeral=True
                    )
                    return
                
                # Update detailed penalties
                settings.restart_penalties = {
                    "free_restarts": free_restarts,
                    "penalty_tiers": {
                        "3": tier3_penalty,
                        "4": tier4_penalty,
                        "5": tier5_penalty
                    }
                }
                
                await session.commit()
                
                # Create confirmation embed
                embed = discord.Embed(
                    title="‚úÖ –®—Ç—Ä–∞—Ñ—ã –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    description="–ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à—Ç—Ä–∞—Ñ–æ–≤",
                    color=discord.Color.green()
                )
                
                embed.add_field(
                    name="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—Ç–∞—Ä—Ç—ã",
                    value=f"–ü–µ—Ä–≤—ã–µ {free_restarts} —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã",
                    inline=False
                )
                
                embed.add_field(
                    name="üí∞ –®—Ç—Ä–∞—Ñ–Ω—ã–µ —Ä–µ—Å—Ç–∞—Ä—Ç—ã",
                    value=f"""
                    3-–π —Ä–µ—Å—Ç–∞—Ä—Ç: +{tier3_penalty} —Å–µ–∫—É–Ω–¥
                    4-–π —Ä–µ—Å—Ç–∞—Ä—Ç: +{tier4_penalty} —Å–µ–∫—É–Ω–¥
                    5-–π —Ä–µ—Å—Ç–∞—Ä—Ç: +{tier5_penalty} —Å–µ–∫—É–Ω–¥
                    """,
                    inline=False
                )
                
                # Add examples
                examples = []
                for i in range(1, 6):
                    total_penalty = settings.calculate_total_penalty(i)
                    examples.append(f"{i} —Ä–µ—Å—Ç–∞—Ä—Ç: +{total_penalty}—Å")
                
                embed.add_field(
                    name="üìä –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞",
                    value="\n".join(examples),
                    inline=False
                )
                
                await interaction.response.send_message(embed=embed, ephemeral=True)
                
        except ValueError:
            await interaction.response.send_message(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.",
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à—Ç—Ä–∞—Ñ–æ–≤: {str(e)}",
                ephemeral=True
            )

class ChannelSelectionView(View):
    def __init__(self, guild: discord.Guild, settings_type: str):
        super().__init__(timeout=300)
        self.guild = guild
        self.settings_type = settings_type
        self.selected_channel = None
        
        # Add channel selection buttons
        for channel in guild.channels:
            if isinstance(channel, (discord.TextChannel, discord.CategoryChannel)):
                label = f"#{channel.name}" if isinstance(channel, discord.TextChannel) else f"üìÅ {channel.name}"
                self.add_item(Button(
                    label=label[:100],  # Discord limit
                    custom_id=f"select_{channel.id}",
                    style=discord.ButtonStyle.secondary
                ))

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if not interaction.data.get("custom_id", "").startswith("select_"):
            return False
            
        channel_id = int(interaction.data["custom_id"].replace("select_", ""))
        channel = self.guild.get_channel(channel_id)
        
        if channel:
            self.selected_channel = channel
            await interaction.response.send_message(
                f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {channel.mention}",
                ephemeral=True
            )
            self.stop()
        
        return True

class Admin(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.db = DatabaseManager()
        self.locale = LocaleManager()
        
    @app_commands.command(name="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    @app_commands.describe(
        penalty="–®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)",
        match_channel="–ö–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–µ–π",
        leaderboard_channel="–ö–∞–Ω–∞–ª –¥–ª—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞",
        audit_channel="–ö–∞–Ω–∞–ª –¥–ª—è –∞—É–¥–∏—Ç–∞",
        voice_category="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    )
    async def settings(
        self, 
        interaction: discord.Interaction,
        penalty: Optional[int] = None,
        match_channel: Optional[discord.TextChannel] = None,
        leaderboard_channel: Optional[discord.TextChannel] = None,
        audit_channel: Optional[discord.TextChannel] = None,
        voice_category: Optional[discord.CategoryChannel] = None
    ):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                ephemeral=True
            )
            return
            
        await interaction.response.defer()
        
        try:
            # Get or create guild settings
            async with self.db.get_session() as session:
                settings = await session.get(PenaltySettings, interaction.guild_id)
                
                if not settings:
                    settings = PenaltySettings(
                        guild_id=interaction.guild_id,
                        restart_penalty=30
                    )
                    session.add(settings)
                
                # Update settings if provided
                if penalty is not None:
                    settings.restart_penalty = penalty
                if match_channel is not None:
                    settings.match_channel_id = match_channel.id
                if leaderboard_channel is not None:
                    settings.leaderboard_channel_id = leaderboard_channel.id
                if audit_channel is not None:
                    settings.audit_channel_id = audit_channel.id
                if voice_category is not None:
                    settings.voice_category_id = voice_category.id
                
                await session.commit()
                
                # Create settings embed
                embed = discord.Embed(
                    title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
                    color=discord.Color.blue()
                )
                
                embed.add_field(
                    name="–®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)",
                    value=f"{settings.restart_penalty} —Å–µ–∫—É–Ω–¥",
                    inline=True
                )
                
                # Show detailed penalty info
                penalties = settings.restart_penalties
                free_restarts = penalties.get("free_restarts", 2)
                penalty_tiers = penalties.get("penalty_tiers", {})
                
                detailed_penalty_text = f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {free_restarts}\n"
                for tier, penalty in sorted(penalty_tiers.items(), key=lambda x: int(x[0])):
                    detailed_penalty_text += f"{tier}-–π: +{penalty}—Å\n"
                
                embed.add_field(
                    name="–î–µ—Ç–∞–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã",
                    value=detailed_penalty_text.strip(),
                    inline=True
                )
                
                if settings.match_channel_id:
                    channel = interaction.guild.get_channel(settings.match_channel_id)
                    embed.add_field(
                        name="–ö–∞–Ω–∞–ª –¥–ª—è –º–∞—Ç—á–µ–π",
                        value=channel.mention if channel else "–ù–µ –Ω–∞–π–¥–µ–Ω",
                        inline=True
                    )
                
                if settings.leaderboard_channel_id:
                    channel = interaction.guild.get_channel(settings.leaderboard_channel_id)
                    embed.add_field(
                        name="–ö–∞–Ω–∞–ª –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞",
                        value=channel.mention if channel else "–ù–µ –Ω–∞–π–¥–µ–Ω",
                        inline=True
                    )
                
                if settings.audit_channel_id:
                    channel = interaction.guild.get_channel(settings.audit_channel_id)
                    embed.add_field(
                        name="–ö–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞",
                        value=channel.mention if channel else "–ù–µ –Ω–∞–π–¥–µ–Ω",
                        inline=True
                    )
                
                if settings.voice_category_id:
                    category = interaction.guild.get_channel(settings.voice_category_id)
                    embed.add_field(
                        name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
                        value=f"üìÅ {category.name}" if category else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞",
                        inline=True
                    )
                
                await interaction.followup.send(embed=embed)
                
        except Exception as e:
            await interaction.followup.send(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}",
                ephemeral=True
            )

    @app_commands.command(name="penalties", description="–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—ã")
    async def configure_penalties(self, interaction: discord.Interaction):
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—ã"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                ephemeral=True
            )
            return
            
        try:
            # Get current settings
            async with self.db.get_session() as session:
                settings = await session.get(PenaltySettings, interaction.guild_id)
                
                if not settings:
                    await interaction.response.send_message(
                        "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π `/settings`",
                        ephemeral=True
                    )
                    return
                
                # Open detailed penalty modal
                modal = DetailedPenaltyModal(settings)
                await interaction.response.send_modal(modal)
                
        except Exception as e:
            await interaction.response.send_message(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —à—Ç—Ä–∞—Ñ–æ–≤: {str(e)}",
                ephemeral=True
            )

    @app_commands.command(name="penalty_info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö —à—Ç—Ä–∞—Ñ–∞—Ö –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—ã")
    async def penalty_info(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö —à—Ç—Ä–∞—Ñ–∞—Ö –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—ã"""
        await interaction.response.defer()
        
        try:
            async with self.db.get_session() as session:
                settings = await session.get(PenaltySettings, interaction.guild_id)
                
                if not settings:
                    await interaction.followup.send(
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/settings` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                        ephemeral=True
                    )
                    return
                
                # Create penalty info embed
                embed = discord.Embed(
                    title="‚ö° –®—Ç—Ä–∞—Ñ—ã –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—ã",
                    description="–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à—Ç—Ä–∞—Ñ–æ–≤",
                    color=discord.Color.orange()
                )
                
                penalties = settings.restart_penalties
                free_restarts = penalties.get("free_restarts", 2)
                penalty_tiers = penalties.get("penalty_tiers", {})
                
                embed.add_field(
                    name="üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–µ—Å—Ç–∞—Ä—Ç—ã",
                    value=f"–ü–µ—Ä–≤—ã–µ {free_restarts} —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã",
                    inline=False
                )
                
                if penalty_tiers:
                    penalty_text = ""
                    for tier, penalty in sorted(penalty_tiers.items(), key=lambda x: int(x[0])):
                        penalty_text += f"**{tier}-–π —Ä–µ—Å—Ç–∞—Ä—Ç**: +{penalty} —Å–µ–∫—É–Ω–¥\n"
                    embed.add_field(
                        name="üí∞ –®—Ç—Ä–∞—Ñ–Ω—ã–µ —Ä–µ—Å—Ç–∞—Ä—Ç—ã",
                        value=penalty_text,
                        inline=False
                    )
                
                # Add examples
                examples = []
                for i in range(1, 6):
                    total_penalty = settings.calculate_total_penalty(i)
                    examples.append(f"{i} —Ä–µ—Å—Ç–∞—Ä—Ç: +{total_penalty}—Å")
                
                embed.add_field(
                    name="üìä –ü—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞",
                    value="\n".join(examples),
                    inline=False
                )
                
                embed.add_field(
                    name="‚öôÔ∏è –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
                    value=f"–û–±—â–∏–π —à—Ç—Ä–∞—Ñ: {settings.restart_penalty}—Å –∑–∞ –∫–∞–∂–¥—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç",
                    inline=False
                )
                
                embed.set_footer(text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /penalties –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                
                await interaction.followup.send(embed=embed)
                
        except Exception as e:
            await interaction.followup.send(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à—Ç—Ä–∞—Ñ–∞—Ö: {str(e)}",
                ephemeral=True
            )

    @app_commands.command(name="setup_channels", description="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")
    async def setup_channels(self, interaction: discord.Interaction):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                ephemeral=True
            )
            return
            
        await interaction.response.send_message(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–µ–π:",
            view=ChannelSelectionView(interaction.guild, "match"),
            ephemeral=True
        )

    @app_commands.command(name="post_instructions", description="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞")
    async def post_instructions(self, interaction: discord.Interaction):
        """–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
                ephemeral=True
            )
            return
            
        await interaction.response.defer()
        
        try:
            # Create instructions embed
            embed = discord.Embed(
                title="üéÆ Discord Rating Bot - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è",
                description="–ë–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –º–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏",
                color=discord.Color.green()
            )
            
            embed.add_field(
                name="üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                value="""
                `/challenge @–∏–≥—Ä–æ–∫` - –í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –º–∞—Ç—á
                `/rating` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥
                `/leaderboard` - –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
                `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞
                """,
                inline=False
            )
            
            embed.add_field(
                name="üèÜ –§–æ—Ä–º–∞—Ç—ã –º–∞—Ç—á–µ–π",
                value="""
                **Bo1** - –û–¥–Ω–∞ –∏–≥—Ä–∞, –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫ —Å –ª—É—á—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
                **Bo2** - –î–≤–µ –∏–≥—Ä—ã, –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫ —Å –º–µ–Ω—å—à–µ–π —Å—É–º–º–æ–π –≤—Ä–µ–º–µ–Ω–∏
                **Bo3** - –¢—Ä–∏ –∏–≥—Ä—ã, –ø–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–±–µ–¥
                """,
                inline=False
            )
            
            embed.add_field(
                name="‚ö° –®—Ç—Ä–∞—Ñ—ã –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç—ã",
                value="–ì–∏–±–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —à—Ç—Ä–∞—Ñ–æ–≤ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏",
                inline=False
            )
            
            embed.add_field(
                name="üìä –†–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞",
                value="–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ Glicko-2 –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤",
                inline=False
            )
            
            embed.add_field(
                name="üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                value="""
                `/settings` - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
                `/penalties` - –î–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ç—Ä–∞—Ñ–æ–≤
                `/penalty_info` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à—Ç—Ä–∞—Ñ–∞—Ö
                `/setup_channels` - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
                `/new_season` - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω
                """,
                inline=False
            )
            
            embed.set_footer(text="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞")
            
            # Send instructions
            message = await interaction.channel.send(embed=embed)
            
            # Pin the message
            await message.pin()
            
            # Update database with message ID
            async with self.db.get_session() as session:
                settings = await session.get(PenaltySettings, interaction.guild_id)
                
                if not settings:
                    settings = PenaltySettings(
                        guild_id=interaction.guild_id,
                        restart_penalty=30
                    )
                    session.add(settings)
                
                settings.instructions_message_id = message.id
                await session.commit()
            
            await interaction.followup.send(
                f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –≤ {interaction.channel.mention}",
                ephemeral=True
            )
            
        except Exception as e:
            await interaction.followup.send(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {str(e)}",
                ephemeral=True
            )

    @app_commands.command(name="new_season", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω")
    async def new_season(self, interaction: discord.Interaction, name: str):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∑–æ–Ω"""
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∑–æ–Ω–æ–≤.",
                ephemeral=True
            )
            return
            
        await interaction.response.defer()
        
        try:
            from models.season import Season
            from datetime import date, timedelta
            
            async with self.db.get_session() as session:
                # End current active season
                current_season = await session.execute(
                    "SELECT * FROM seasons WHERE is_active = true"
                )
                current_season = current_season.scalar_one_or_none()
                
                if current_season:
                    current_season.is_active = False
                
                # Create new season
                new_season = Season(
                    name=name,
                    start_date=date.today(),
                    end_date=date.today() + timedelta(days=90),
                    is_active=True
                )
                
                session.add(new_season)
                await session.commit()
                
                await interaction.followup.send(
                    f"‚úÖ –ù–æ–≤—ã–π —Å–µ–∑–æ–Ω '{name}' —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
                    ephemeral=True
                )
                
        except Exception as e:
            await interaction.followup.send(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞: {str(e)}",
                ephemeral=True
            )

    @app_commands.command(name="guild_info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞")
    async def guild_info(self, interaction: discord.Interaction):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞"""
        await interaction.response.defer()
        
        try:
            async with self.db.get_session() as session:
                settings = await session.get(PenaltySettings, interaction.guild_id)
                
                if not settings:
                    await interaction.followup.send(
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/settings` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                        ephemeral=True
                    )
                    return
                
                # Get guild statistics
                from models.match import Match
                from models.player import Player
                
                total_matches = await session.execute(
                    "SELECT COUNT(*) FROM matches WHERE guild_id = :guild_id",
                    {"guild_id": interaction.guild_id}
                )
                total_matches = total_matches.scalar()
                
                active_matches = await session.execute(
                    "SELECT COUNT(*) FROM matches WHERE guild_id = :guild_id AND status != 'complete'",
                    {"guild_id": interaction.guild_id}
                )
                active_matches = active_matches.scalar()
                
                total_players = await session.execute(
                    "SELECT COUNT(DISTINCT p.id) FROM players p JOIN matches m ON p.id IN (m.player1_id, m.player2_id) WHERE m.guild_id = :guild_id",
                    {"guild_id": interaction.guild_id}
                )
                total_players = total_players.scalar()
                
                # Create info embed
                embed = discord.Embed(
                    title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ",
                    color=discord.Color.blue()
                )
                
                embed.add_field(
                    name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    value=f"""
                    –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {total_matches}
                    –ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π: {active_matches}
                    –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_players}
                    """,
                    inline=False
                )
                
                embed.add_field(
                    name="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                    value=f"–®—Ç—Ä–∞—Ñ –∑–∞ —Ä–µ—Å—Ç–∞—Ä—Ç: {settings.restart_penalty} —Å–µ–∫",
                    inline=True
                )
                
                # Show detailed penalty info
                penalties = settings.restart_penalties
                free_restarts = penalties.get("free_restarts", 2)
                embed.add_field(
                    name="‚ö° –®—Ç—Ä–∞—Ñ—ã",
                    value=f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {free_restarts}",
                    inline=True
                )
                
                if settings.match_channel_id:
                    channel = interaction.guild.get_channel(settings.match_channel_id)
                    embed.add_field(
                        name="üéÆ –ö–∞–Ω–∞–ª –º–∞—Ç—á–µ–π",
                        value=channel.mention if channel else "–ù–µ –Ω–∞–π–¥–µ–Ω",
                        inline=True
                    )
                
                if settings.voice_category_id:
                    category = interaction.guild.get_channel(settings.voice_category_id)
                    embed.add_field(
                        name="üîä –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–π—Å–æ–≤",
                        value=f"üìÅ {category.name}" if category else "–ù–µ –Ω–∞–π–¥–µ–Ω–∞",
                        inline=True
                    )
                
                await interaction.followup.send(embed=embed)
                
        except Exception as e:
            await interaction.followup.send(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
                ephemeral=True
            )

async def setup(bot: commands.Bot):
    await bot.add_cog(Admin(bot))