version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: discord_bot_postgres
    environment:
      POSTGRES_DB: discord_bot
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: bot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - bot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bot_user -d discord_bot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: discord_bot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Discord Bot
  bot:
    build: .
    container_name: discord_bot
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DATABASE_URL=postgresql+asyncpg://bot_user:bot_password@postgres:5432/discord_bot
      - REDIS_URL=redis://redis:6379
      - DEFAULT_LOCALE=${DEFAULT_LOCALE:-en}
      - DEFAULT_RESTART_PENALTY=${DEFAULT_RESTART_PENALTY:-30}
      - VOICE_CHANNEL_DELAY=${VOICE_CHANNEL_DELAY:-300}
      - CONFIRMATION_TIMEOUT=${CONFIRMATION_TIMEOUT:-300}
      - INITIAL_RATING=${INITIAL_RATING:-1500}
      - K_FACTOR_NEW=${K_FACTOR_NEW:-40}
      - K_FACTOR_ESTABLISHED=${K_FACTOR_ESTABLISHED:-20}
      - ESTABLISHED_THRESHOLD=${ESTABLISHED_THRESHOLD:-30}
      - SEASON_DURATION_DAYS=${SEASON_DURATION_DAYS:-90}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bot_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for background tasks
  celery_worker:
    build: .
    container_name: discord_bot_celery
    command: celery -A tasks worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://bot_user:bot_password@postgres:5432/discord_bot
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bot_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Celery Beat for scheduled tasks
  celery_beat:
    build: .
    container_name: discord_bot_celery_beat
    command: celery -A tasks beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://bot_user:bot_password@postgres:5432/discord_bot
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bot_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Nginx for reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: discord_bot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - bot
    networks:
      - bot_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  bot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16