version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: discord_bot_postgres_prod
    environment:
      POSTGRES_DB: discord_bot
      POSTGRES_USER: ${POSTGRES_USER:-bot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bot_password}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/backups:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Only local access
    networks:
      - bot_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bot_user} -d discord_bot"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for caching and task queues
  redis:
    image: redis:7-alpine
    container_name: discord_bot_redis_prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data_prod:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - bot_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Discord Bot (multiple instances for load balancing)
  bot:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: discord_bot_prod
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-bot_user}:${POSTGRES_PASSWORD:-bot_password}@postgres:5432/discord_bot
      - REDIS_URL=redis://redis:6379
      - DEFAULT_LOCALE=${DEFAULT_LOCALE:-en}
      - DEFAULT_RESTART_PENALTY=${DEFAULT_RESTART_PENALTY:-30}
      - VOICE_CHANNEL_DELAY=${VOICE_CHANNEL_DELAY:-300}
      - CONFIRMATION_TIMEOUT=${CONFIRMATION_TIMEOUT:-300}
      - INITIAL_RATING=${INITIAL_RATING:-1500}
      - K_FACTOR_NEW=${K_FACTOR_NEW:-40}
      - K_FACTOR_ESTABLISHED=${K_FACTOR_ESTABLISHED:-20}
      - ESTABLISHED_THRESHOLD=${ESTABLISHED_THRESHOLD:-30}
      - SEASON_DURATION_DAYS=${SEASON_DURATION_DAYS:-90}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bot_network_prod
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
      - ./backups:/app/backups
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2  # Run 2 instances for redundancy
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Celery Worker for background tasks
  celery_worker:
    build: .
    image: discord_bot:latest
    container_name: discord_bot_celery_prod
    command: celery -A tasks worker --loglevel=${LOG_LEVEL:-INFO} --concurrency=4
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-bot_user}:${POSTGRES_PASSWORD:-bot_password}@postgres:5432/discord_bot
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bot_network_prod
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Celery Beat for scheduled tasks
  celery_beat:
    build: .
    image: discord_bot:latest
    container_name: discord_bot_celery_beat_prod
    command: celery -A tasks beat --loglevel=${LOG_LEVEL:-INFO}
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-bot_user}:${POSTGRES_PASSWORD:-bot_password}@postgres:5432/discord_bot
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bot_network_prod
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Nginx for reverse proxy and load balancing
  nginx:
    image: nginx:alpine
    container_name: discord_bot_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - bot
    networks:
      - bot_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: discord_bot_prometheus_prod
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bot_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: discord_bot_grafana_prod
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - bot_network_prod
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup service
  backup:
    build: .
    image: discord_bot:latest
    container_name: discord_bot_backup_prod
    command: python backup_service.py
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-bot_user}:${POSTGRES_PASSWORD:-bot_password}@postgres:5432/discord_bot
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bot_network_prod
    restart: unless-stopped
    volumes:
      - ./backups:/app/backups
      - ./logs:/app/logs
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  bot_network_prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: br-bot-prod